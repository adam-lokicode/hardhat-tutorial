import { ErrorDescriptor } from "./errors-list";
/**
 * Base error class extended by all custom errors.
 * Placeholder to allow us to customize error output formatting in the future.
 *
 * @alpha
 */
export declare class CustomError extends Error {
    constructor(message: string, cause?: Error);
}
/**
 * All exceptions intentionally thrown with Ignition-core
 * extend this class.
 *
 * @alpha
 */
export declare class IgnitionError extends CustomError {
    #private;
    constructor(errorDescriptor: ErrorDescriptor, messageArguments?: Record<string, string | number>, cause?: Error);
    get errorNumber(): number;
}
/**
 * This class is used to throw errors from Ignition plugins made by third parties.
 *
 * @alpha
 */
export declare class IgnitionPluginError extends CustomError {
    static isIgnitionPluginError(error: any): error is IgnitionPluginError;
    private readonly _isIgnitionPluginError;
    readonly pluginName: string;
    constructor(pluginName: string, message: string, cause?: Error);
}
/**
 * This class is used to throw errors from *core* Ignition plugins.
 * If you are developing a third-party plugin, use IgnitionPluginError instead.
 *
 * @alpha
 */
export declare class NomicIgnitionPluginError extends IgnitionPluginError {
    static isNomicIgnitionPluginError(error: any): error is NomicIgnitionPluginError;
    private readonly _isNomicIgnitionPluginError;
}
/**
 * This function applies error messages templates like this:
 *
 *  - Template is a string which contains a variable tags. A variable tag is a
 *    a variable name surrounded by %. Eg: %plugin1%
 *  - A variable name is a string of alphanumeric ascii characters.
 *  - Every variable tag is replaced by its value.
 *  - %% is replaced by %.
 *  - Values can't contain variable tags.
 *  - If a variable is not present in the template, but present in the values
 *    object, an error is thrown.
 *
 * @param template - The template string.
 * @param values - A map of variable names to their values.
 *
 * @alpha
 */
export declare function applyErrorMessageTemplate(template: string, values: {
    [templateVar: string]: any;
}): string;
//# sourceMappingURL=errors.d.ts.map