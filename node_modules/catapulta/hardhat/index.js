const hardhatConfig = require('hardhat/config');
const fs = require('fs');

//require('@nomicfoundation/hardhat-toolbox');

const { extendConfig } = hardhatConfig;

const CATAPULTA_HARDHAT_RPC = process.env.CATAPULTA_HARDHAT_RPC || '';
const CATAPULTA_UUID = process.env.CATAPULTA_UUID;
const PRIVATE_KEY = process.env.PRIVATE_KEY || '';
const MNEMONIC = process.env.MNEMONIC || '';
const MNEMONIC_HD_PATH = process.env.MNEMONIC_HD_PATH || "m/44'/60'/0'/0";

if (CATAPULTA_HARDHAT_RPC && CATAPULTA_UUID) {
  task(
    'catapulta:deploy:info',
    'Prints the info of a hardhat deploy',
    async (taskArgs, hre) => {
      const all = await hre.deployments.all();
      const paths = await hre.artifacts.getArtifactPaths();
      const entries = Object.entries(all);
      if (!entries.length) {
        return;
      }
      const txsInfo = entries
        .reduce((acc, [,value]) => {
          if (value.transactionHash) {
            acc.txs.add(value.transactionHash)
          }
          if (value.libraries && !!Object.keys(value.libraries).length) {
            Object.entries(value.libraries).forEach(([libName, address]) => {
              if ([...acc.libraries].some(x => x.includes(address))) return;
              const path = paths.find(x => x.includes(libName))
              if (!path) {
                console.error('Library path not found:', libName);
              }
              const artifact = JSON.parse(fs.readFileSync(path));
              acc.libraries.add(`${artifact.sourceName}:${artifact.contractName}:${address}`)
            }) 
          }
          return acc;
        }, { txs: new Set(), libraries: new Set()})


      console.log("catapulta-verify:", JSON.stringify({ txs: [...txsInfo.txs].map(x => ({hash: x})), libraries: [...txsInfo.libraries]}));
    }
  );

  let accounts;
  if (PRIVATE_KEY) {
    accounts = [...PRIVATE_KEY.split(',')];
  } else if (MNEMONIC) {
    accounts = {
      mnemonic: MNEMONIC,
      path: MNEMONIC_HD_PATH,
      initialIndex: 0,
      count: 50,
    };
  } else {
    console.error(
      '[catapulta] PRIVATE_KEY or MNEMONIC is not set at environment variable. Exiting...'
    );
    throw 'PRIVATE_KEY or MNEMONIC is not set at environment variable';
  }
  extendConfig((config, userConfig) => {
    config.networks[`catapulta-${CATAPULTA_UUID}`] = {
      url: CATAPULTA_HARDHAT_RPC,
      accounts,
    };
    if (CATAPULTA_HARDHAT_RPC.includes('280')) {
       config.networks[`catapulta-${CATAPULTA_UUID}`].zksync = true;
       config.networks[`catapulta-${CATAPULTA_UUID}`].ethNetwork = 'goerli';
    }
    if (CATAPULTA_HARDHAT_RPC.includes('324')) {
       config.networks[`catapulta-${CATAPULTA_UUID}`].zksync = true;
       config.networks[`catapulta-${CATAPULTA_UUID}`].ethNetwork = 'mainnet';
    }
    return config;
  });
}
